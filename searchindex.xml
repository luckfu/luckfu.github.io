<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>纪念朝哥</title><url>http://www.luckfu.com/post/xuzhao/</url><categories><category>生活</category></categories><tags><tag>生活</tag></tags><content type="html"> 二十年多年的好兄弟，许朝，走了，享年52，最近一段时间常常陷入精神空耗，本以为的来日方常，现在却是天人永隔。 两周前接到朝哥爱人电话，说朝哥走了，一时间脑子处于停顿状态，毕竟几天前还跟朝哥微信聊天，说起还在抗炎症之后治疗马上要进入下一阶段，再往前十来天，还在跟我聊电脑配置，怎么才能访问外网，是不是我的网关有问题等。骤然的噩耗让我觉得一切都不真实。直到灵堂见到朝哥就躺在那里，才不得不接受这个现实，朝哥的大姐告诉我，其实，朝哥治疗期间一直在生死边缘徘徊，病情非常凶险，但好在朝哥自己很乐观，所以传递给我的信息，也很乐观。
次日出殡，因为我跟朝哥的大部分朋友都不熟，下午又要赶去外地，就没有参加午餐，去跟大姐辞行时，大姐说，感谢你能来，我却在脑子里幻化出画面，如果我没去，朝哥正生气的对我说“你混蛋，最后一程都不来送我&hellip;&hellip;”
初见朝哥，大约是在九十年代初，那时我住的地方，旁边是广播电视局，家里没有烧水的话，可以去广电局的锅炉房花2分钱接一瓶开水，有次去打水，见到一个光膀子的胖子，躺在车棚的边三轮摩托车旁纳凉，再后来偶尔也见他骑摩托出入，那时我们互不相识，我还在读高中，他大概是混社会的模样。
再后来，我参加工作，我应该是属于九十年代电脑技术在那个三线城市里出类拔萃的，某天，突然朝哥突然来我们门面，大侃要怎么局域网办公，聊的非常投机，隔天朝哥拖了一车电脑，叫上我，去了广播电台，当天我甚至见到了中学时“以能拨通电话点歌或者写信被回复为荣”的播音主持人，广播台播音和办公室在两层楼，铺设调试局域网，我们楼上楼下忙的不亦乐乎。再后来，朝哥闲来无事就常常来找我们玩，也常带我去电台玩，那时我们都年轻，没心没肺的玩就行，常常晚上一个15块钱的锅仔，几块钱的二锅头，胡吹海侃的聊天就觉得很开心了，记得有一次，喝到了假酒，一个兄弟出门就吐了，我大概快走到家时也吐了，唯独朝哥，第二天跟我们说，可能喝了假酒，难受死了却忍住没吐。。。
九十年代末第一次互联网泡沫时，朝哥说我们来做个网站吧，虽然最终我们什么也没做，但想想当时的设定还是停大胆的，许老哥哥的设定是戒毒主题，甚至包括吸毒要注意的最低限度安全事项等，想来如果真的能实现，现在也被关停了吧。
朝哥当时主要做安防工程，有一次不知道是不是抵账还是什么，弄回几台大彩电，送到我家一台，大概是用到04年搬家，老屋我没再回去过，有可能拆迁的时候电视机都还在。
2000年后，为谋生我到了深圳，给朝哥打电话联系，朝哥表示怎么不声不响就走了，后来朝哥来深圳，我们站在赛格旁的过街天桥下，我跟他说，深圳人的速度和我们那里是不一样的，不信你看天桥上走路的行人，速度都比我们那里的人快一些，像奔命的，我们一起逛赛格和旁边的电子元件批发市场，朝哥很感慨，这里什么都能找到。
2003年，辗转杭州最终到了武汉工作，朝哥很高心，跟我说，既然是在武汉了，不如辞职回家，一起创业，让我加入他的公司，朝哥其实说过很多次，但我心中一直有个君子之交淡如水的执念，我担心工作关系坏了交情，毕竟之前亲戚间，朋友间有过一些工作和合伙的交集后，反而相处尴尬。
2008年，我在上海出差一年，朝哥到上海八个月，我跟他住一个标间，他借来朋友的车，我们满上海玩，夜里开车到闸北，印象里比较深的还有去一个刘嘉玲开的酒吧。
朝哥应该算是成功的商人，所以他有和我们这样完全不同的朋友圈，但朝哥一直喜爱技术，可以说是一个IT达人，常常痴迷技术或者新产品时需要有共同兴趣的人，很早之前nas还没有流行时，不知从那哪里看来buffalo的nas可以改机，于是便定了两台给我快递来一台，我改完之后确实没有这方面的需求，只能扔在办公室，后来觉得atom的cpu一定能做机顶盒，便又给我发来一台华硕eeeebox N270的电脑，再后来，ipad初代刚出，朝哥便快递送我一台，说让我体验一下。
大概在2009年，车祸伤了脚，不严重，但在武汉没人照顾，姐夫当天赶到武汉却没有开车，打电话给朝哥，朝哥二话不说开车往返600公里，把我接回家。
前几年，朝哥每年春节还能到我家吃个饭喝个酒，2000年疫情爆发，打断了这个惯例，解封后一次去朝哥家，他因为女儿感染手足口自己被传染，病的很重，按大姐的说法，这时候可能免疫系统就有点问题，不然怎么全家就他一个成年人感染。
2021年上半年，我们还在讨论怎么订阅油管和奈飞会员，注册clubhuse玩耍，怎么注册oracle免费主机做通道上外网，调侃程序员的最终出路是送外卖，甚至有一次在一个酒局喝醉了，还是朝哥一直陪我喝茶聊天到醒酒，最后一次两家人带孩子玩耍后，去朝哥觉得不错的烧烤摊吃烧烤。
到了6月底，本打算带儿子去朝哥家玩，聊了两句觉得不太对，毕竟几十年兄弟，言谈间能感觉到有事情发生，于是到他家，这时已经检测出淋巴癌并且做了手术，朝哥要我保密，不要跟任何人说，因为化疗的原因白细胞指标特别低，没有抵抗力，所以我没敢多待，回家后也没跟家里人说，后来听许老哥哥说，朝哥在病房里，常常接电话时告诉对方，他在出差。
7月，朝哥来武汉协和住院，让我买电热壶和水果煮水果茶，本来住院部是不让进的，但我上楼之后还是硬挤了进去，后来再送水果去的时候，朝哥甚至还和向老师一起，我们在楼下星巴克喝了咖啡聊了会儿天，没想到那次星巴克里竟然是现实里我们最后一次见面。后来又有一次，朝哥甚至说去外面找个餐馆一起吃个饭，着实吓着我了，我赶紧说 等你身体好了，我们再出来吃饭，现在外面对你来说太危险&hellip;
10月，国庆节期间，朝哥已经回家住院，奈何病房不让进，听说朝哥的二姐从上海回来，隔离15天，然后假期就结束了，终究也没能进病房。
11月，朝哥又来了武汉，这次是同济，我去了两次，也只能在楼下见到小向老师，最后一次去，向老师说，CAR-T已经制备完，在冷库放着了，就等回输，我甚至感觉有点兴奋了，因为这种疗法最近传的神乎其神，新闻里都是痊愈的报道，觉得朝哥遇到了好时候，朝哥自己应该也是满怀希望的，最后一次视频，朝哥看着我做完早餐，评价吃的还可以，就是缺了点蔬菜，然后聊起在医院附近租房，因为恢复期要求出现状况30分钟能到医院。
12月29，我问朝哥，什么时候能进行下一步治疗，朝哥说快了，元旦放假后的第一个周末，小向老师打来电话，说朝哥已经走了.
套用一句以前朝哥说过的话，一个人生里做了大半辈子朋友的人就这么走了&hellip;&hellip;🙏
朝哥的追悼会，许老哥哥说了很多朝哥的人生和工作经历，但与我记忆中的朝哥，那只是很小的一部分，年纪大了，记性不好，记下一些碎念，缅怀朝哥。</content></entry><entry><title>梨膏咖啡</title><url>http://www.luckfu.com/post/xueli_gao_coffee/</url><categories><category>生活</category></categories><tags><tag>生活</tag></tags><content type="html"> 早上刷头条，一个视频中提到中式咖啡，咖啡厅里一个老外正在品尝“陈皮咖啡”，于是起床后我也用胶囊咖啡打了一杯梨膏咖啡😊 味道还不错，咖啡梨膏一次喝了，省了一杯水</content></entry><entry><title>安装 HoRNDIS驱动 将Android设备USB共享网络给Mac Monterey</title><url>http://www.luckfu.com/post/horndis_mac/</url><categories><category>Monterey</category><category>macOS</category><category>RNDIS</category><category>USB网络共享</category><category>HoRNDIS</category></categories><tags><tag>Monterey</tag><tag>macOS</tag><tag>RNDIS</tag><tag>HoRNDIS</tag></tags><content type="html"> 1、macOS的RNDIS支持 apple的小动作从Monterey开始取消蓝牙PAN网络共享之后，不得不想其它连接方法实现双网络，Android的USB网络共享基于RNDIS协议，据说在windows下可用，但macOS没有原生支持，在mac下的第三方实现似乎只有HoRNDIS 官网 https://www.joshuawise.com/horndis 但官网经年未更新过了，提供的最新版仅仅支持到 macOS10.10 Yosemite，直接下载安装会提示系统阻止不安全插件，好在HoRNDIS开源社区还挺活跃 可以通过github上相关分支安装对应版本。
2、HoRNDIS 下载 Monterey 对应的 https://github.com/chris1111/HoRNDIS 下载地址 https://github.com/chris1111/HoRNDIS/releases
下载文件后解压可见 3、安装 安装步骤说明在 “GUIDE Consent HoRNDIS.pdf”中
3.1 允许安装 因为是第三方打包的程序，所以需要添加手工添加公证 执行 Consent-HoRNDIS.command，如果系统阻止，在“系统偏好设置”=>&ldquo;隐私与安全"中允许，
3.2 关闭SIP 进入Recovery模式，关闭SIP
重启，开机按住command+R键，进入恢复模式 点击实用工具 => 点击终端 终端内输入命令：csrutil disable 终端内输入命令：/usr/sbin/spctl kext-consent add 54GTJ2AU36 重启 3.3 安装HoRNDIS 打开 HoRNDIS-Consent.pkg 3.4 允许HoRNDIS 内核扩展 在“系统偏好设置”=>&ldquo;隐私与安全"中允许app从任意位置 3.5 开启SIP (为了安全) 进入Recovery模式，开启SIP
重启，开机按住command+R键，进入恢复模式 点击实用工具 => 点击终端 终端内输入命令：csrutil enable 最后通过 USB 将手机连接到 Mac，打开手机上的usb网络共享&hellip;.</content></entry><entry><title>Kubernetes修改NodePort范围必须要注意的问题</title><url>http://www.luckfu.com/post/k8s-nodeport-range/</url><categories><category>k8s</category></categories><tags><tag>k8s</tag></tags><content type="html"> Kubernetes 集群中NodePort默认范围是 30000-32767，网络上对修改方法的说明很多，但最近的实际操作中，有一个隐藏的问题，让我花了一天时间。
在Master节点上的文件 /etc/kubernetes/manifests/kube-apiserver.yaml，修改此文件，向其中添--service-node-port-range=1-65535
#作为一个常年操作在线系统的的人，一定会先备份配置文件，没有异议吧？ cp kube-apiserver.yaml kube-apiserver.yaml.bak vi kube-apiserver.yaml ..... Host Port: &lt;none> Command: kube-apiserver - --service-cluster-ip-range=10.96.0.0/12 # 插入 - --service-node-port-range=1-65535 ...... 之后，大部分文档告诉你需要
# 获得 apiserver 的 pod 名字 export apiserver_pods=$(kubectl get pods --selector=component=kube-apiserver -n kube-system --output=jsonpath={.items..metadata.name}) # 删除 apiserver 的 pod kubectl delete pod $apiserver_pods -n kube-system 又或者说还要重启服务
systemctl daemon-reload systemctl restart kubelet 甚至还有如果你有多master节点，需要每个master节点操作一次的说法,但实际情况是，不需要每台master重复操作(k8s会自己同步)，你既不需要重启master节点，也不需要删除pod的方式重启kube-apiserver
你真正需要的只是修改kube-apiserver.yaml，修改完成后你会发现无论你删除pod重启还是重启服务，新配置都不生效，其实问题就出在备份文件，移走kube-apiserver.yaml.bak 再查看
kubectl describe pod $apiserver_pods -n kube-system 你会发现端口范围已经修改生效！</content></entry><entry><title>macOS Monterey中蓝牙PAN(Bluetooth PAN)到哪里去了？ 😡</title><url>http://www.luckfu.com/post/macos_monterey_bluetooth_apn/</url><categories><category>Monterey</category><category>Bluetooth PAN</category><category>macOS</category></categories><tags><tag>Monterey</tag><tag>Bluetooth PAN</tag><tag>macOS</tag></tags><content type="html"> 我有一台办公的旧mac，操作系统是big sur，使用wifi连接内网，同时蓝牙连接手机上外网，这对我来说是办公的硬性需求，然而不幸的是最近升级了Monterey，蓝牙网络连接没有了。
macOS big sur时的蓝牙连接网络 macOS Monterey时，连接网络消失了 更不幸的是，为了测试是不是升级到macOS Monterey引起的这个问题，我把另一台mac air也升级到了Monterey，于是我手里所有的电脑都不能连接蓝牙网络了。</content></entry><entry><title>联邦学习框架 FATE 单机版源码部署 ARM主机</title><url>http://www.luckfu.com/post/fate_install/</url><categories><category>FATE</category><category>联邦学习</category></categories><tags><tag>FATE</tag><tag>FATE-Board</tag><tag>联邦学习</tag></tags><content type="html"> FATE(Federated AI Technology Enabler)是一个联邦学习框架。本文大部分内容来自官方文档整合，单独记录的原因是这次需要源码部署，官方部署文档 https://github.com/FederatedAI/FATE 中一些细节需要自己摸索，形成总结。
1.部署前环境检查 python环境 jdk Maven 本地8080、9360、9380端口是否被占用 netstat -apln|grep 8080 netstat -apln|grep 9360 netstat -apln|grep 9380 2. 设置环境变量 设置环境变量是因为FATA框架中，很多脚本要用到环境变量
export branch={分支名称, 若使用某个发布版本分支, 则为`v版本号`, 如`v1.7.0`} export version={FATE版本号, 如1.7.0} export version_tag={FATE版本标签, 如rc1/rc2/release} 3. 获取源码 git clone https://github.com/FederatedAI/FATE.git -b ${branch} --recurse-submodules --depth=1 #或者 git clone https://gitee.com/FederatedAI/FATE.git -b ${branch} --depth=1; #更新代码 cd FATE; bash build/common/update_submodule_from_gitee.sh git pull git submodule update --remote 4. 运行时环境变量 cd {上述代码的存放目录} export FATE_PROJECT_BASE=$PWD export version=`grep "FATE=" ${FATE_PROJECT_BASE}/fate.env | awk -F "=" '{print $2}'` 5. 安装FATE所需要的Python依赖包 5.1 修改依赖包说明文件 官方部署文档中 requirements版本要求非常严格，实际部署中，可能因为某些原因无法满足，比如我的环境是ARM版Ubuntu,tensorflow和pytouch的版本支持有限，这种情况下可以删除python/requirements.txt的版本描述。原则上版本高一点是可以的。
在 python/requirements.txt 增加
ruamel.yaml peewee apsw dotenv redis cos-python-sdk-v5 beautifultable kazoo coverage cloudpickle lmdb coverage pycryptodomex libsm3py 5.2 安装Python依赖包 cd ${FATE_PROJECT_BASE}; sh bin/install_os_dependencies.sh; source ${FATE_VENV_BASE}/bin/activate; pip install -r python/requirements.txt 6. 配置FATE 编辑bin/init_env.sh环境变量文件
cd ${FATE_PROJECT_BASE} sed -i.bak "s#PYTHONPATH=.*#PYTHONPATH=$PWD/python:$PWD/fateflow/python#g" bin/init_env.sh; sed -i.bak "s#venv=.*#venv=${FATE_VENV_BASE}#g" bin/init_env.sh 检查conf/service_conf.yaml全局配置文件中是否将基础引擎配置为单机版, 若default_engines显示如下，则为单机版
default_engines:computing:standalonefederation:standalonestorage:standalone7. 启动fate flow server cd ${FATE_PROJECT_BASE}; source bin/init_env.sh; cd fateflow; bash bin/service.sh status; bash bin/service.sh start 显示如下类似则为启动成功，否则请依据提示查看日志
bash service start sucessfully. pid: 111907 status:app 111907 75.7 1.1 3740008 373448 pts/2 Sl+ 12:21 0:17 python /xx/FATE/fateflow/python/fate_flow/fate_flow_server.py python 111907 app 14u IPv4 3570158828 0t0 TCP localhost:boxp (LISTEN) python 111907 app 13u IPv4 3570158827 0t0 TCP localhost:9360 (LISTEN) 8. 安装fate client cd ${FATE_PROJECT_BASE}; source bin/init_env.sh; cd python/fate_client/; python setup.py install 初始化fate flow client
cd ../../; flow init -c conf/service_conf.yaml 显示如下类似则为初始化成功，否则请依据提示查看日志
{ "retcode": 0, "retmsg": "Fate Flow CLI has been initialized successfully." } 9. FATE-Board 安装 FATE-Board的部署需要java环境和Maven
9.1 配置修改 修改 ${FATE_PROJECT_BASE}/fateboard/src/main/resources/application.properties 文件
spring.datasource.driver-Class-Name=org.sqlite.JDBC ··· fateboard.datasource.jdbc-url=jdbc:sqlite:路径/数据库文件名 9.2 打包 cd fateboard/ mvn clean package -DskipTests 9.3 启动 FATE-Board nohup \ java -Dspring.config.location=${FATE_PROJECT_BASE}/fateboard/src/main/resources/application.properties \ -Dssh_config_file=${FATE_PROJECT_BASE}/fateboard//src/main/resources/ \ -Xmx2048m -Xms2048m -XX:+PrintGCDetails \ -Xloggc:gc.log -XX:+HeapDumpOnOutOfMemoryError \ -jar ${FATE_PROJECT_BASE}/fateboard//target/fateboard-${version}.jar > /dev/null 2>&amp;1 &amp; 访问 http:127.0.0.1:8080 用户名 admin 密码 admin
10. 测试项 10.1 Toy测试 flow test toy -gid 10000 -hid 10000 如果成功，屏幕显示类似下方的语句:
success to calculate secure_sum, it is 2000.0 10.2 单元测试 cd ${FATE_PROJECT_BASE}; bash ./python/federatedml/test/run_test.sh 如果成功，屏幕显示类似下方的语句:
there are 0 failed test</content></entry><entry><title>hugo + github action + github vscode 真香</title><url>http://www.luckfu.com/post/first_github_action/</url><categories><category>github</category><category>github action</category><category>hugo</category></categories><tags><tag>github</tag><tag>github action</tag><tag>hugo</tag></tags><content type="html"> github action 真香，github的vscode编辑器真香，结合起来😄 本站是基于hugo发布在github pages上,这种静态网站比较麻烦的是，本地编辑本地发布，public发布到github.io,如果还要源码也存入github，还得再建一个repo存源码，public作为submodule添加到根repo，deploy时还得submodule update， 还好此时有action，通过:actions-hugo，只需要发布源码的repo，就可以更新github pages,真香
更香的是，github 推出了牛逼哄哄的vscode编辑器，只要在源码项目上点.键 自动进入网页版vscode，自带git，现在可以通过这个编辑器在线编写内容，保存提交，action自动发布，实现在线编辑blog的需求。</content></entry><entry><title>将docker容器作为虚拟机折腾</title><url>http://www.luckfu.com/post/ampere_a1_docker/</url><categories><category>cloud vps</category><category>docker</category></categories><tags><tag>Oracle Cloud</tag><tag>Free VPS</tag><tag>docker</tag><tag>VM.Standard.A1.Flex</tag></tags><content type="html"> 上一篇说到Oracle Cloud免费且大热的4c24g的VM.Standard.A1.Flex机型难申请，而实际使用中，oracle cloud免费套餐中陷阱还是很多的，以下是几种常见情况：
免费主机超额度，免费存储超额度，oc优先停掉的资源就是这个A1.Flex机型。
A1.Flex机型可选操作系统只有oracle linux 7或8，不一定顺手。
操作系统被玩坏时，不像一般云服务控制台可以恢复镜像，你只能重新申请
将容器作为虚拟机使用并不符合容器应用部署的初衷，但鉴于以上问题本文中采用docker创建一个容器代替虚拟机，一切在虚机中操作，当系统灾难不可恢复时，删掉就好，省却刷机抢注之苦。
布署步骤 ssh 登录到主机
1、安装docker yum install docker 2、Dockerfile 编写Dockerfile
FROMubuntu:20.04LABELMAINTAINER="luckfu.com"USERroot# change root password to `ubuntu` RUNecho'root:ubuntu'|chpasswdENVDEBIAN_FRONTENDnoninteractive# install ssh server RUNapt-getupdate&amp;&amp;apt-getinstall-y\openssh-serversudo\&amp;&amp;rm-rf/var/lib/apt/lists/* \ &amp;&amp; mkdir -p /run/sshd \ &amp;&amp; ssh-keygen -A \ &amp;&amp; sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config \ &amp;&amp; apt-get purge -y --auto-remove EXPOSE 22 # run ssh server CMD ["/usr/sbin/sshd", "-D", "-o", "ListenAddress=0.0.0.0"] 3、生成镜像 docker build -f ./Dockerfile -t ubuntu-ssh 使用 docker images命令查看
docker images REPOSITORY TAG IMAGE ID CREATED SIZE ubuntuos-ssh latest b6010c26ebb7 1 days ago 189MB ubuntu 20.04 d5ca7a445605 8 weeks ago 65.6MB 4、启动容器 执行命令
docker run -d -p 9022:22 -p 8000-9000:8000-9000 \ -v /data/:/data \ --name ubuntuos-ssh ubuntuos-ssh 主要参数及含义：
参数 解释 -d 守护进程模式 -p 端口映射 [主机端口:容器端口] -v 存储卷映射 [主机目录:容器目录] &ndash;name 指定容器名称 ubuntuos 上述命令中我们部署了一个名称为ubuntuos-ssh的容器，将主机的/data(oracle cloud 中可以申请100G“始终免费”存储，挂载到主机/data)挂载到容器的/data下，将主机的9022映射容器的ssh服务22端口，另外开放了8000-9000端口备用
查看容器是否运行
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 0c9cf191daf2 ubuntuos-ssh "/usr/sbin/sshd -D -…" 12 days ago Up 12 days 0.0.0.0:8000-9000->8000-9000/tcp, :::8000-9000->8000-9000/tcp, 0.0.0.0:9022->22/tcp, :::9022->22/tcp ubuntuos-ssh 登录容器ß
这里我们要使用ssh，而不是exec -it 进入
密码 ubuntu
ssh root@localhost -p 9022 root@localhost's password: (base) root@xxxxxxx:~# 到这里如果正常登录，则说明容器正常运行
5、通过网络登录 登录oracle cloud控制台
检查容器使用的 22 8000-9000端口是否开通 主机检查防火墙如iptables firwwall中，端口是否打开 远程登录 ssh root@IP -p 9022 可劲造吧</content></entry><entry><title>使用python脚本抢注Oracle甲骨文 VM.Standard.A1.Flex</title><url>http://www.luckfu.com/post/ampere_a1_free/</url><categories><category>cloud vps</category><category>python</category><category>oci</category></categories><tags><tag>Oracle Cloud</tag><tag>Free VPS</tag><tag>python script</tag><tag>自动化脚本</tag><tag>VM.Standard.A1.Flex</tag></tags><content type="html"> Oracle cloud 开放注册账号能申请4c24g的免费云服务器,数据库以及其他的服务，1c1g的x86服务器比较容易申请，但热门的4c24g的Ampere A1类型主机通过网页正常申请根本申请不到，目前网络上流行的抢注方法无外乎两种模式：
浏览器插件或脚本或按键精灵，这种方法的问题是控制台超时，还容易被服务器判定非法操作，禁用账号，对于动辄要求稳定运行几天才能完成的操作，显然已经不合适。 调用oci命令脚本，这是最安全的模式，因为oci是oracle官方提供，原理是使用oci命令直接申请实例，例如： oci compute instance launch .... 然而，根据我香港主机测试，这种最多只能做到20秒刷新一次，原因是 oci 命令执行的完整的过程：
1、启动、开始连接 oracle cloud 2、验证用户合法性 3、执行命令 4、退出 1，2，4步骤在循环中浪费了大量时间，本文中采用python调用oci api 的模式，一次登录省略多次验证环节，循环执行创建instance命令，刷新速度可以达到3秒/次 当返回instance创建成功时，自动退出。
布署步骤 1、下载oci工具 bash -c "$(curl –L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh)" 默认回车，安装完成后，执行下面命令检查是否成功
oci -v 2、配置oci连接 在oracle cloud控制台上，点击右上角头像=>菜单中选择“用户设置” 复制用户和租户ID 输入
oci setup config 填写正确的用户和租户id
Enter a location for your config [/root/.oci/config]: Enter a user OCID: #输入你的用户ocid Enter a tenancy OCID: #输入你租户的用户id Enter a region by index or name(e.g. 1: ap-chiyoda-1, 2: ap-chuncheon-1, 3: ap-hyderabad-1, 4: ap-melbourne-1, 5: ap-mumbai-1, 6: ap-osaka-1, 7: ap-seoul-1, 8: ap-sydney-1, 9: ap-tokyo-1, 10: ca-montreal-1, 11: ca-toronto-1, 12: eu-amsterdam-1, 13: eu-frankfurt-1, 14: eu-zurich-1, 15: me-dubai-1, 16: me-jeddah-1, 17: sa-santiago-1, 18: sa-saopaulo-1, 19: uk-cardiff-1, 20: uk-gov-cardiff-1, 21: uk-gov-london-1, 22: uk-london-1, 23: us-ashburn-1, 24: us-gov-ashburn-1, 25: us-gov-chicago-1, 26: us-gov-phoenix-1, 27: us-langley-1, 28: us-luke-1, 29: us-phoenix-1, 30: us-sanjose-1): 9 #这里选择区域 Do you want to generate a new API Signing RSA key pair? (If you decline you will be asked to supply the path to an existing key.) [Y/n]: y #输入y Enter a directory for your keys to be created [/root/.oci]: Enter a name for your key [oci_api_key]: Public key written to: /root/.oci/oci_api_key_public.pem Enter a passphrase for your private key (empty for no passphrase): Private key written to: /root/.oci/oci_api_key.pem Fingerprint: Config written to /root/.oci/config ... 复制生成的公钥，获取命令如下：
cat /root/.oci/oci_api_key_public.pem 把展示出来的内容复制下来。并且添加到，甲骨文后台=>用户设置&raquo;资源&raquo;API秘钥&raquo;添加API秘钥
3、python脚本 安装python oci 假设你已经安装好python环境
pip install oci 登录证书 新建或使用系统已有的证书，本文直接查看本机已有证书记录下来 cat ~/.ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAA......local 修改脚本 下载:
link 修改luanch.py 脚本中的参数 INSTANCE_NAME = 'vps实例名' #你要创建的vps实例名 SUBNET_ID = "网络->虚拟云网络->虚拟云网络详细信息->OCID" #如果是全新用户，先创建一个VNC compartment_id= &lt;font color=red>"租户id" ssh_public_key="id_rsa.pub的内容" 运行 执行脚本，当主机申请完成，会自动退出
python ./luanch.py</content></entry><entry><title>关于我</title><url>http://www.luckfu.com/about.html</url><categories/><tags/><content type="html"> 更多信息请访问GitHub.</content></entry></search>