<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>Use the docker container as a virtual machine</title><url>http://www.luckfu.com/en/post/ampere_a1_docker/</url><categories><category>cloud vps</category><category>Docker</category></categories><tags><tag>Oracle Cloud</tag><tag>Free VPS</tag><tag>docker</tag><tag>VM.Standard.A1.Flex</tag></tags><content type="html"> The last article mentioned that Oracle Cloud‚Äôs free and popular 4c24g VM.Standard.A1.Flex model is difficult to apply, but in actual use, there are still many traps in the Oracle Cloud free package. The following are some common situations:
Free hosting is over quota, free storage is over quota, oc priority to stop the resource is this A1.Flex vps „ÄÇ
Flex.A1 The optional operating system is only oracle linux v7 or v8 , if you like ubuntu&hellip;üò≠
When the operating system is broken, unlike general cloud service consoles that can restore the image, you can only reapply
Using a container as a virtual machine is not in line with the original intention of container application deployment, but in view of the above problems, docker is used to create a container instead of a virtual machine in this article. Everything is operated in the virtual machine. When the system disaster is unrecoverable, just delete container and Create the container again.
Deployment steps ssh Log in to the host
1„ÄÅInstall docker yum install docker 2„ÄÅDockerfile Writing Dockerfile
FROMubuntu:20.04LABELMAINTAINER="luckfu.com"USERroot# change root password to `ubuntu` RUNecho'root:ubuntu'|chpasswdENVDEBIAN_FRONTENDnoninteractive# install ssh server RUNapt-getupdate&amp;&amp;apt-getinstall-y\openssh-serversudo\&amp;&amp;rm-rf/var/lib/apt/lists/* \ &amp;&amp; mkdir -p /run/sshd \ &amp;&amp; ssh-keygen -A \ &amp;&amp; sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config \ &amp;&amp; apt-get purge -y --auto-remove EXPOSE 22 # run ssh server CMD ["/usr/sbin/sshd", "-D", "-o", "ListenAddress=0.0.0.0"] 3„ÄÅGenerate image docker build -f ./Dockerfile -t ubuntu-ssh docker images view image list
docker images REPOSITORY TAG IMAGE ID CREATED SIZE ubuntuos-ssh latest b6010c26ebb7 1 days ago 189MB ubuntu 20.04 d5ca7a445605 8 weeks ago 65.6MB 4„ÄÅLaunching containers ÊâßË°åÂëΩ‰ª§
docker run -d -p 9022:22 -p 8000-9000:8000-9000 \ -v /data/:/data \ --name ubuntuos-ssh ubuntuos-ssh parameters and meaningÔºö
Parameters Description -d Daemon mode -p Port Mapping [host port:Port in container] -v volume mapping [host vol:container vol] &ndash;name container name ubuntu-ssh In the above command, we deployed a container named ubuntuos-ssh, and set the host&rsquo;s /data(you can apply for 100G &ldquo;always free&rdquo; storage in the oracle cloud and mount it to the host /data) is mounted under the /data of the container, and 9022 of the host is mapped to port 22 of the ssh service of the container, and ports 8000-9000 are opened for spare
Check if the container is running
CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 0c9cf191daf2 ubuntuos-ssh "/usr/sbin/sshd -D -‚Ä¶" 12 days ago Up 12 days 0.0.0.0:8000-9000->8000-9000/tcp, :::8000-9000->8000-9000/tcp, 0.0.0.0:9022->22/tcp, :::9022->22/tcp ubuntuos-ssh Log in to the container
use ssh instead of exec -it to enter
password: ubuntu
ssh root@localhost -p 9022 root@localhost's password: (base) root@xxxxxxx:~# If login success, the container is running normally
5„ÄÅLogin from internet Login to Oracle Cloud
Check VNC config ,port 22 8000-9000 used by the container is open checks the firewall such as iptables firwwallÔºåport is open ssh root@IP -p 9022 Let&rsquo;s play</content></entry><entry><title>Use python scripts to preemptively create Oracle VM.Standard.A1.Flex</title><url>http://www.luckfu.com/en/post/ampere_a1_free/</url><categories><category>cloud vps</category><category>python</category><category>oci</category></categories><tags><tag>Oracle Cloud</tag><tag>Free VPS</tag><tag>python script</tag><tag>Automation script</tag><tag>VM.Standard.A1.Flex</tag></tags><content type="html"> Oracle cloud open registered account can apply for 4c24g free cloud server, database and other services, 1c1g x86 server is easier to apply, but the popular 4c24g Ampere A1 type of host under normal circumstances can not apply through the web, currently popular on the Internet Cybersquatting methods are nothing more than two modesÔºö
Browser plug-ins or scripts or button wizards. The problem with this method is that the console is timed out. It is also easy to be judged by the server as illegal operations. Accounts are disabled. It is obviously not suitable for operations that require stable operation for several days. Call the oci command script, this is the safest mode, because oci is officially provided by oracle, the principle is to use the oci command to directly apply for an instance, for exampleÔºö oci compute instance launch .... However, according to my Hong Kong host test, this can only be refreshed every 20 seconds at most, because the complete process of the oci command executionÔºö
1„ÄÅstart to connect to oracle cloud 2„ÄÅVerify user legitimacy 3„ÄÅExcuting an command 4„ÄÅexit Steps 1, 2, and 4 waste a lot of time in the loop. In this article, we use python to call the oci api , omit multiple verification , and execute the create instance command in loop. The refresh speed can reach 3 seconds/time. When the instance creation is successful, return ,Automatic withdrawal.
Deployment steps 1„ÄÅDownload oci tools bash -c "$(curl ‚ÄìL https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh)" By default, press Enter. After the installation is complete, execute the following command to check whether it is successful
oci -v 2„ÄÅConfigure oci On the oracle cloud console, click on the avatar in the upper right corner => select &ldquo;User Settings&rdquo; in the menu to copy the user and tenancy OCID execute
oci setup config Fill in the correct user and tenancy id
Enter a location for your config [/root/.oci/config]: Enter a user OCID: #your user ocid Enter a tenancy OCID: #your tenancy ocid Enter a region by index or name(e.g. 1: ap-chiyoda-1, 2: ap-chuncheon-1, 3: ap-hyderabad-1, 4: ap-melbourne-1, 5: ap-mumbai-1, 6: ap-osaka-1, 7: ap-seoul-1, 8: ap-sydney-1, 9: ap-tokyo-1, 10: ca-montreal-1, 11: ca-toronto-1, 12: eu-amsterdam-1, 13: eu-frankfurt-1, 14: eu-zurich-1, 15: me-dubai-1, 16: me-jeddah-1, 17: sa-santiago-1, 18: sa-saopaulo-1, 19: uk-cardiff-1, 20: uk-gov-cardiff-1, 21: uk-gov-london-1, 22: uk-london-1, 23: us-ashburn-1, 24: us-gov-ashburn-1, 25: us-gov-chicago-1, 26: us-gov-phoenix-1, 27: us-langley-1, 28: us-luke-1, 29: us-phoenix-1, 30: us-sanjose-1): 9 # select you regist region Do you want to generate a new API Signing RSA key pair? (If you decline you will be asked to supply the path to an existing key.) [Y/n]: y #y Enter a directory for your keys to be created [/root/.oci]: Enter a name for your key [oci_api_key]: Public key written to: /root/.oci/oci_api_key_public.pem Enter a passphrase for your private key (empty for no passphrase): Private key written to: /root/.oci/oci_api_key.pem Fingerprint: Config written to /root/.oci/config ... Copy the generated public key and get the command as followsÔºö
cat /root/.oci/oci_api_key_public.pem Copy the displayed content. And add it to Identity=>Users=>User Details=>API Keys Key&raquo;Add API Keys
3„ÄÅpython programe Install python oci Assuming you have installed the python environment
pip install oci Login public certificate Create a new or use the existing certificate of the system, this article directly check the existing certificate of this machine and record it cat ~/.ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAA......local Modify script download:
link Modify the parameters in the luanch.py ‚Äã‚Äãscript INSTANCE_NAME = 'apply instance name' #If you are a new user, create a VCN first SUBNET_ID = "Networking=>Virtual Cloud Networks=>Virtual Cloud Network Details OCID" compartment_id= "tenancy OCID" ssh_public_key="Contents of id_rsa.pub" run script Execute the script, when the instance apply completed, it will automatically exit
python ./luanch.py</content></entry><entry><title>About</title><url>http://www.luckfu.com/en/about.html</url><categories/><tags/><content type="html"> Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.
Hugo makes use of a variety of open source projects including:
https://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.
Hugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.
Websites built with Hugo are extremely fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.
Learn more and contribute on GitHub.</content></entry></search>